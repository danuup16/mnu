-- Tambahkan kode ini sebelum Rayfield:LoadConfiguration()

-- Webhook Tab
local WebhookTab = Window:CreateTab("Webhook", "bell-ring")

-- Webhook Variables
local webhookURL = ""
local isWebhookActive = false
local trackedItems = {}
local lastInventoryData = {}
local sentItems = {} -- Track items yang sudah dikirim
local debounceTimer = {} -- Debounce untuk mencegah spam
local inventoryConnection = nil

-- Webhook URL Input
local WebhookInput = WebhookTab:CreateInput({
    Name = "Discord Webhook URL",
    PlaceholderText = "https://discord.com/api/webhooks/...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        webhookURL = Text
        if Text ~= "" then
            Rayfield:Notify({
                Title = "Webhook URL Set",
                Content = "Ready to track items!",
                Duration = 3,
                Image = "bell-ring",
            })
        end
    end,
})

-- Function to generate unique item key
local function getItemKey(itemInfo)
    local key = tostring(itemInfo.Id)
    
    if itemInfo.Metadata then
        if itemInfo.Metadata.Weight then
            key = key .. "_" .. tostring(itemInfo.Metadata.Weight)
        end
        if itemInfo.Metadata.VariantId then
            key = key .. "_variant_" .. tostring(itemInfo.Metadata.VariantId)
        end
    end
    
    -- Add timestamp to make it more unique
    key = key .. "_" .. tostring(math.floor(tick()))
    
    return key
end

-- Function to check if item was recently sent
local function wasRecentlySent(itemKey)
    local currentTime = tick()
    
    -- Clean old entries (older than 30 seconds)
    for key, timestamp in pairs(sentItems) do
        if currentTime - timestamp > 30 then
            sentItems[key] = nil
        end
    end
    
    -- Check if this item was sent recently (within 5 seconds)
    if sentItems[itemKey] and (currentTime - sentItems[itemKey]) < 5 then
        return true
    end
    
    return false
end

-- Function to mark item as sent
local function markItemAsSent(itemKey)
    sentItems[itemKey] = tick()
end
local function getItemData(itemId)
    local success, itemData = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local itemsFolder = ReplicatedStorage:FindFirstChild("Items")
        
        if not itemsFolder then
            return nil
        end
        
        -- Cari item berdasarkan ID
        for _, itemModule in pairs(itemsFolder:GetChildren()) do
            if itemModule:IsA("ModuleScript") then
                local success2, data = pcall(function()
                    return require(itemModule)
                end)
                
                if success2 and data and data.Data and data.Data.Id == itemId then
                    return {
                        Name = data.Data.Name,
                        Type = data.Data.Type,
                        Tier = data.Data.Tier,
                        SellPrice = data.SellPrice,
                        Weight = data.Weight,
                        Icon = data.Data.Icon,
                        Probability = data.Probability
                    }
                end
            end
        end
        
        return nil
    end)
    
    if success then
        return itemData
    else
        warn("Error getting item data:", itemData)
        return nil
    end
end

-- Function to format weight for display
local function formatWeight(weight, actualWeight)
    if not weight then
        return "Unknown"
    end
    
    local weightText = string.format("%.1f kg", actualWeight or 0)
    
    if weight.Big and actualWeight then
        if actualWeight >= weight.Big.Min then
            weightText = weightText .. " (BIG)"
        end
    end
    
    return weightText
end

-- Function to get tier info
local function getTierInfo(tier)
    local tierColors = {
        [1] = {name = "Common", color = 0x808080},
        [2] = {name = "Uncommon", color = 0x00FF00},
        [3] = {name = "Rare", color = 0x0080FF},
        [4] = {name = "Epic", color = 0x8000FF},
        [5] = {name = "Legendary", color = 0xFF8000},
        [6] = {name = "Mythic", color = 0xFF0080},
        [7] = {name = "Divine", color = 0xFFD700},
        [8] = {name = "Exotic", color = 0xFF69B4}
    }
    
    return tierColors[tier] or {name = "Unknown", color = 0x808080}
end

-- Function to send webhook with debounce
local function sendWebhookDebounced(itemName, itemData, weight, isVariant, variantName, itemKey)
    -- Check debounce
    local currentTime = tick()
    if debounceTimer[itemKey] and (currentTime - debounceTimer[itemKey]) < 3 then
        print("Webhook blocked by debounce for:", itemName)
        return
    end
    
    -- Check if already sent recently
    if wasRecentlySent(itemKey) then
        print("Webhook blocked - item recently sent:", itemName)
        return
    end
    
    -- Set debounce timer
    debounceTimer[itemKey] = currentTime
    
    -- Mark as sent
    markItemAsSent(itemKey)
    
    -- Send webhook
    sendWebhook(itemName, itemData, weight, isVariant, variantName)
    
    print("Webhook sent for:", itemName, "Key:", itemKey)
end
local function sendWebhook(itemName, itemData, weight, isVariant, variantName)
    if webhookURL == "" then
        return
    end
    
    local success, error = pcall(function()
        local player = game.Players.LocalPlayer
        local tierInfo = getTierInfo(itemData.Tier or 1)
        
        -- Calculate rarity text
        local rarityText = "Unknown"
        if itemData.Probability and itemData.Probability.Chance then
            local chance = itemData.Probability.Chance
            if chance >= 0.1 then
                rarityText = string.format("1 in %.0f", 1/chance)
            else
                rarityText = string.format("1 in %.0f", 1/chance)
            end
        end
        
        -- Item title with variant
        local fullItemName = itemName
        if isVariant and variantName then
            fullItemName = variantName .. " " .. itemName
        end
        
        local data = {
            ["username"] = "Fish It Tracker",
            ["avatar_url"] = "https://cdn.discordapp.com/attachments/1234567890/fish_icon.png",
            ["embeds"] = {{
                ["title"] = "üé£ New Fish Caught!",
                ["color"] = tierInfo.color,
                ["fields"] = {
                    {
                        ["name"] = "üêü Fish Name",
                        ["value"] = "**" .. fullItemName .. "**",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "‚öñÔ∏è Weight",
                        ["value"] = formatWeight(itemData.Weight, weight),
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üí∞ Sell Price",
                        ["value"] = "**$" .. (itemData.SellPrice or 0) .. "**",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "‚≠ê Tier",
                        ["value"] = tierInfo.name .. " (T" .. (itemData.Tier or 1) .. ")",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üé≤ Rarity",
                        ["value"] = rarityText,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "üë§ Player",
                        ["value"] = player.Name,
                        ["inline"] = true
                    }
                },
                ["footer"] = {
                    ["text"] = "Fish It Tracker ‚Ä¢ " .. os.date("%Y-%m-%d %H:%M:%S")
                },
                ["thumbnail"] = {
                    ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=150&height=150&format=png"
                }
            }}
        }
        
        local headers = {["Content-Type"] = "application/json"}
        local body = game:GetService("HttpService"):JSONEncode(data)
        local req = http_request or request or syn.request or fluxus and fluxus.request
        
        if req then
            req({
                Url = webhookURL,
                Method = "POST",
                Headers = headers,
                Body = body
            })
        end
    end)
    
    if not success then
        warn("Webhook error:", error)
    end
end

-- Function to monitor inventory changes with duplicate prevention
local function startInventoryMonitoring()
    -- Disconnect existing connection
    if inventoryConnection then
        inventoryConnection:Disconnect()
        inventoryConnection = nil
    end
    
    local success, error = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Client = require(ReplicatedStorage.Packages.Replion).Client
        local ItemUtility = require(ReplicatedStorage.Shared.ItemUtility)
        
        -- Wait for data replion
        local dataReplion = Client:WaitReplion("Data")
        
        -- Get initial inventory state
        local currentInventory = dataReplion:Get("Inventory") or {}
        lastInventoryData = currentInventory
        
        print("üé£ Webhook monitoring started!")
        
        local function getTableKeys(tbl)
            local keys = {}
            for k, _ in pairs(tbl) do
                table.insert(keys, tostring(k))
            end
            return keys
        end
        
        print("Initial inventory categories:", table.concat(getTableKeys(currentInventory or {}), ", "))
        
        -- Monitor inventory changes with debounce
        inventoryConnection = dataReplion:OnChange("Inventory", function(newInventory, oldInventory)
            if not isWebhookActive or not newInventory then
                return
            end
            
            print("üì¶ Inventory changed!")
            print("Categories found:", table.concat(getTableKeys(newInventory), ", "))
            
            -- Use oldInventory or lastInventoryData
            local previousInventory = oldInventory or lastInventoryData
            
            -- Wait a bit to ensure data is stable
            task.wait(0.2) -- Reduced wait time
            
            -- Check for new items in ALL categories (not just "Fishes")
            for category, items in pairs(newInventory) do
                if type(items) == "table" then
                    print("üîç Checking category:", category, "Items count:", #getTableKeys(items))
                    
                    for uuid, itemInfo in pairs(items) do
                        if itemInfo and itemInfo.Id then -- Only process valid items
                            local isNewItem = false
                            local previousItem = nil
                            
                            -- Check if item existed before
                            if previousInventory and previousInventory[category] and previousInventory[category][uuid] then
                                previousItem = previousInventory[category][uuid]
                                
                                -- Check if quantity increased (new fish caught)
                                if itemInfo.Quantity and previousItem.Quantity then
                                    if itemInfo.Quantity > previousItem.Quantity then
                                        isNewItem = true
                                        print("üìà Quantity increased for item:", itemInfo.Id, "Old:", previousItem.Quantity, "New:", itemInfo.Quantity)
                                    end
                                end
                            else
                                -- Completely new item
                                isNewItem = true
                                print("üÜï New item detected:", itemInfo.Id)
                            end
                            
                            if isNewItem then
                                -- Get item data first to check if it's a fish
                                local itemData = getItemData(itemInfo.Id)
                                
                                if itemData then
                                    print("üìã Item data found:", itemData.Name, "Type:", itemData.Type)
                                    
                                    -- Only send webhook for fish
                                    if itemData.Type == "Fishes" then
                                        print("üêü Fish detected, preparing webhook...")
                                        
                                        -- Generate unique key for this specific item
                                        local itemKey = getItemKey(itemInfo)
                                        
                                        -- Check for variants
                                        local isVariant = false
                                        local variantName = nil
                                        
                                        if itemInfo.Metadata and itemInfo.Metadata.VariantId then
                                            local variantData = ItemUtility:GetVariantData(itemInfo.Metadata.VariantId)
                                            if variantData and variantData.Data then
                                                isVariant = true
                                                variantName = variantData.Data.Name
                                                print("‚ú® Variant found:", variantName)
                                            end
                                        end
                                        
                                        -- Get weight from metadata
                                        local weight = nil
                                        if itemInfo.Metadata and itemInfo.Metadata.Weight then
                                            weight = itemInfo.Metadata.Weight
                                            print("‚öñÔ∏è Weight:", weight)
                                        end
                                        
                                        -- Send webhook with debounce protection
                                        task.spawn(function()
                                            sendWebhookDebounced(itemData.Name, itemData, weight, isVariant, variantName, itemKey)
                                            
                                            -- Show notification
                                            Rayfield:Notify({
                                                Title = "Fish Detected!",
                                                Content = (variantName and (variantName .. " ") or "") .. itemData.Name .. " sent to webhook",
                                                Duration = 5,
                                                Image = "bell-ring",
                                            })
                                        end)
                                    else
                                        print("‚ùå Item is not a fish:", itemData.Type)
                                    end
                                else
                                    print("‚ùå No item data found for ID:", itemInfo.Id)
                                end
                            end
                        end
                    end
                end
            end
            
            -- Update last inventory data
            lastInventoryData = newInventory
        end)
        
    end)
    
    if not success then
        warn("Error starting inventory monitoring:", error)
        Rayfield:Notify({
            Title = "Monitoring Error",
            Content = "Failed to start inventory monitoring",
            Duration = 5,
            Image = "bell-ring",
        })
    end
end

-- Webhook Toggle
local WebhookToggle = WebhookTab:CreateToggle({
    Name = "Enable Webhook Tracking",
    CurrentValue = false,
    Flag = "webhooktracking",
    Callback = function(Value)
        isWebhookActive = Value
        
        if Value then
            if webhookURL == "" then
                Rayfield:Notify({
                    Title = "No Webhook URL",
                    Content = "Please enter webhook URL first",
                    Duration = 5,
                    Image = "bell-ring",
                })
                WebhookToggle:Set(false)
                return
            end
            
            -- Clear tracking data when starting
            sentItems = {}
            debounceTimer = {}
            lastInventoryData = {}
            
            -- Start monitoring
            startInventoryMonitoring()
            
            Rayfield:Notify({
                Title = "Webhook Tracking Started",
                Content = "Now tracking new fish catches",
                Duration = 5,
                Image = "bell-ring",
            })
        else
            -- Stop monitoring
            if inventoryConnection then
                inventoryConnection:Disconnect()
                inventoryConnection = nil
            end
            
            -- Clear tracking data
            sentItems = {}
            debounceTimer = {}
            
            Rayfield:Notify({
                Title = "Webhook Tracking Stopped",
                Content = "",
                Duration = 3,
                Image = "bell-ring",
            })
        end
    end,
})

-- Test Webhook Button
local TestWebhookButton = WebhookTab:CreateButton({
    Name = "üß™ Test Webhook",
    Callback = function()
        if webhookURL == "" then
            Rayfield:Notify({
                Title = "No Webhook URL",
                Content = "Please enter webhook URL first",
                Duration = 5,
                Image = "bell-ring",
            })
            return
        end
        
        -- Send test message
        local testData = {
            Name = "Test Fish",
            Type = "Fishes",
            Tier = 3,
            SellPrice = 150,
            Weight = {Default = {Min = 2, Max = 5}},
            Probability = {Chance = 0.05}
        }
        
        sendWebhook("Test Fish", testData, 3.5, false, nil)
        
        Rayfield:Notify({
            Title = "Test Webhook Sent",
            Content = "Check your Discord channel",
            Duration = 5,
            Image = "bell-ring",
        })
    end,
})

-- Webhook Info
local WebhookParagraph = WebhookTab:CreateParagraph({
    Title = "Webhook Information",
    Content = "üé£ This webhook will track all fish that enter your inventory\n\nüìä Tracked Data:\n‚Ä¢ Fish Name & Variants\n‚Ä¢ Weight (including BIG fish)\n‚Ä¢ Sell Price\n‚Ä¢ Tier & Rarity\n‚Ä¢ Player Info\n\n‚ö†Ô∏è Make sure to test your webhook first!"
})

-- Clear Webhook Button
local ClearWebhookButton = WebhookTab:CreateButton({
    Name = "üóëÔ∏è Clear Webhook URL",
    Callback = function()
        webhookURL = ""
        WebhookInput:Set("")
        if isWebhookActive then
            WebhookToggle:Set(false)
        end
        
        Rayfield:Notify({
            Title = "Webhook URL Cleared",
            Content = "",
            Duration = 3,
            Image = "bell-ring",
        })
    end,
})
