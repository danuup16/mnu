-- FINAL WEBHOOK FIX - COMPLETE SOLUTION
local WebhookTab = Window:CreateTab("Webhook", "bell-ring")

-- Webhook Variables
local webhookURL = ""
local isWebhookActive = false
local lastInventoryState = {}
local inventoryConnection = nil
local httpRetryCount = 0
local maxHttpRetries = 3

-- Webhook URL Input
local WebhookInput = WebhookTab:CreateInput({
    Name = "Discord Webhook URL",
    PlaceholderText = "https://discord.com/api/webhooks/...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        webhookURL = Text
        httpRetryCount = 0 -- Reset retry count when URL changes
        if Text ~= "" then
            Rayfield:Notify({
                Title = "Webhook URL Set",
                Content = "Ready to track items!",
                Duration = 3,
                Image = "bell-ring",
            })
        end
    end,
})

-- Function to get item data from ReplicatedStorage
local function getItemData(itemId)
    local success, itemData = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local itemsFolder = ReplicatedStorage:FindFirstChild("Items")
        
        if not itemsFolder then
            return nil
        end
        
        -- Search for item by ID
        for _, itemModule in pairs(itemsFolder:GetChildren()) do
            if itemModule:IsA("ModuleScript") then
                local success2, data = pcall(function()
                    return require(itemModule)
                end)
                
                if success2 and data and data.Data and data.Data.Id == itemId then
                    return {
                        Name = data.Data.Name,
                        Type = data.Data.Type,
                        Tier = data.Data.Tier,
                        SellPrice = data.SellPrice,
                        Weight = data.Weight,
                        Icon = data.Data.Icon,
                        Probability = data.Probability
                    }
                end
            end
        end
        
        return nil
    end)
    
    if success then
        return itemData
    else
        warn("Error getting item data:", itemData)
        return nil
    end
end

-- Function to format weight for display
local function formatWeight(weight, actualWeight)
    if not actualWeight then
        return "Unknown"
    end
    
    local weightText = string.format("%.1f kg", actualWeight)
    
    if weight and weight.Big and actualWeight >= weight.Big.Min then
        weightText = weightText .. " (BIG)"
    end
    
    return weightText
end

-- Function to get tier info
local function getTierInfo(tier)
    local tierColors = {
        [1] = {name = "Common", color = 0x808080},
        [2] = {name = "Uncommon", color = 0x00FF00},
        [3] = {name = "Rare", color = 0x0080FF},
        [4] = {name = "Epic", color = 0x8000FF},
        [5] = {name = "Legendary", color = 0xFF8000},
        [6] = {name = "Mythic", color = 0xFF0080},
        [7] = {name = "Divine", color = 0xFFD700},
        [8] = {name = "Exotic", color = 0xFF69B4}
    }
    
    return tierColors[tier] or {name = "Unknown", color = 0x808080}
end

-- Function to send webhook with proper error handling and retries
local function sendWebhook(itemName, itemData, weight, isVariant, variantName)
    if webhookURL == "" then
        return
    end
    
    -- Use RunService to ensure main thread execution
    local RunService = game:GetService("RunService")
    
    -- Wait for next heartbeat to ensure we're in main thread
    RunService.Heartbeat:Wait()
    
    spawn(function()
        local retryAttempt = 0
        local maxRetries = 3
        local success = false
        
        while retryAttempt < maxRetries and not success do
            retryAttempt = retryAttempt + 1
            
            local sendSuccess, sendError = pcall(function()
                local player = game.Players.LocalPlayer
                local tierInfo = getTierInfo(itemData.Tier or 1)
                
                -- Calculate rarity text
                local rarityText = "Unknown"
                if itemData.Probability and itemData.Probability.Chance then
                    local chance = itemData.Probability.Chance
                    rarityText = string.format("1 in %.0f", 1/chance)
                end
                
                -- Item title with variant
                local fullItemName = itemName
                if isVariant and variantName then
                    fullItemName = variantName .. " " .. itemName
                end
                
                local data = {
                    ["username"] = "Fish It Tracker",
                    ["embeds"] = {{
                        ["title"] = "🎣 New Fish Caught!",
                        ["color"] = tierInfo.color,
                        ["fields"] = {
                            {
                                ["name"] = "🐟 Fish Name",
                                ["value"] = "**" .. fullItemName .. "**",
                                ["inline"] = true
                            },
                            {
                                ["name"] = "⚖️ Weight",
                                ["value"] = formatWeight(itemData.Weight, weight),
                                ["inline"] = true
                            },
                            {
                                ["name"] = "💰 Sell Price",
                                ["value"] = "**$" .. (itemData.SellPrice or 0) .. "**",
                                ["inline"] = true
                            },
                            {
                                ["name"] = "⭐ Tier",
                                ["value"] = tierInfo.name .. " (T" .. (itemData.Tier or 1) .. ")",
                                ["inline"] = true
                            },
                            {
                                ["name"] = "🎲 Rarity",
                                ["value"] = rarityText,
                                ["inline"] = true
                            },
                            {
                                ["name"] = "👤 Player",
                                ["value"] = player.Name,
                                ["inline"] = true
                            }
                        },
                        ["footer"] = {
                            ["text"] = "Fish It Tracker • " .. os.date("%Y-%m-%d %H:%M:%S")
                        },
                        ["thumbnail"] = {
                            ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=150&height=150&format=png"
                        }
                    }}
                }
                
                local headers = {["Content-Type"] = "application/json"}
                local body = game:GetService("HttpService"):JSONEncode(data)
                
                -- Try different HTTP request methods
                local req = http_request or request or syn.request
                if fluxus and fluxus.request then
                    req = fluxus.request
                end
                
                if req then
                    local response = req({
                        Url = webhookURL,
                        Method = "POST",
                        Headers = headers,
                        Body = body
                    })
                    
                    -- Check if request was successful
                    if response and (response.StatusCode == 200 or response.StatusCode == 204) then
                        success = true
                        print("Webhook sent successfully!")
                    else
                        error("HTTP Error: " .. (response and response.StatusCode or "Unknown"))
                    end
                else
                    error("No HTTP request function available")
                end
            end)
            
            if sendSuccess then
                success = true
                httpRetryCount = 0 -- Reset global retry count on success
            else
                warn("Webhook attempt " .. retryAttempt .. " failed:", sendError)
                
                if retryAttempt < maxRetries then
                    -- Wait before retrying (exponential backoff)
                    wait(retryAttempt * 2)
                else
                    httpRetryCount = httpRetryCount + 1
                    
                    -- If too many global failures, temporarily disable webhook
                    if httpRetryCount >= maxHttpRetries then
                        warn("Too many webhook failures, temporarily disabling...")
                        isWebhookActive = false
                        
                        Rayfield:Notify({
                            Title = "Webhook Temporarily Disabled",
                            Content = "Too many failed attempts. Check your webhook URL.",
                            Duration = 10,
                            Image = "bell-ring",
                        })
                        
                        -- Reset after 30 seconds
                        spawn(function()
                            wait(30)
                            httpRetryCount = 0
                        end)
                    end
                end
            end
        end
    end)
end

-- FIXED: Alternative method 1 - Replion monitoring with proper thread handling
local function startReplionMonitoring()
    local success, error = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        
        -- Check if Replion exists
        local replionPackage = ReplicatedStorage:FindFirstChild("Packages")
        if replionPackage then
            replionPackage = replionPackage:FindFirstChild("_Index")
            if replionPackage then
                for _, folder in pairs(replionPackage:GetChildren()) do
                    if string.find(folder.Name:lower(), "replion") then
                        local replionModule = folder:FindFirstChild("replion")
                        if replionModule then
                            local Replion = require(replionModule)
                            local Client = Replion.Client
                            
                            -- Wait for data replion
                            local dataReplion = Client:WaitReplion("Data")
                            
                            -- Monitor inventory changes with proper thread handling
                            dataReplion:OnChange("Inventory", function(newInventory, oldInventory)
                                if not isWebhookActive or not newInventory then
                                    return
                                end
                                
                                -- CRITICAL: Use RunService to move to main thread
                                local RunService = game:GetService("RunService")
                                RunService.Heartbeat:Connect(function()
                                    -- This will run in the main thread
                                    local processSuccess, processError = pcall(function()
                                        print("Processing inventory change in main thread...")
                                        
                                        -- Check for new items
                                        for category, items in pairs(newInventory) do
                                            if type(items) == "table" then
                                                for uuid, itemInfo in pairs(items) do
                                                    local isNewItem = false
                                                    
                                                    if not oldInventory or not oldInventory[category] or not oldInventory[category][uuid] then
                                                        isNewItem = true
                                                    elseif oldInventory[category][uuid].Quantity and itemInfo.Quantity then
                                                        if itemInfo.Quantity > oldInventory[category][uuid].Quantity then
                                                            isNewItem = true
                                                        end
                                                    end
                                                    
                                                    if isNewItem and itemInfo.Id then
                                                        local itemData = getItemData(itemInfo.Id)
                                                        
                                                        if itemData and itemData.Type == "Fishes" then
                                                            -- Check for variants
                                                            local isVariant = false
                                                            local variantName = nil
                                                            
                                                            if itemInfo.Metadata and itemInfo.Metadata.VariantId then
                                                                local variantSuccess, variantData = pcall(function()
                                                                    local ItemUtility = require(ReplicatedStorage.Shared.ItemUtility)
                                                                    return ItemUtility:GetVariantData(itemInfo.Metadata.VariantId)
                                                                end)
                                                                
                                                                if variantSuccess and variantData and variantData.Data then
                                                                    isVariant = true
                                                                    variantName = variantData.Data.Name
                                                                end
                                                            end
                                                            
                                                            -- Get weight from metadata
                                                            local weight = nil
                                                            if itemInfo.Metadata and itemInfo.Metadata.Weight then
                                                                weight = itemInfo.Metadata.Weight
                                                            end
                                                            
                                                            -- Send webhook
                                                            sendWebhook(itemData.Name, itemData, weight, isVariant, variantName)
                                                            
                                                            -- Show notification
                                                            Rayfield:Notify({
                                                                Title = "Fish Detected!",
                                                                Content = (variantName and (variantName .. " ") or "") .. itemData.Name .. " sent to webhook",
                                                                Duration = 5,
                                                                Image = "bell-ring",
                                                            })
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end)
                                    
                                    if not processSuccess then
                                        warn("Error processing inventory change:", processError)
                                    end
                                    
                                    -- Disconnect this one-time connection
                                    return true
                                end)
                            end)
                            
                            return true
                        end
                    end
                end
            end
        end
        
        return false
    end)
    
    if success then
        print("Replion monitoring started successfully")
        return true
    else
        warn("Failed to start Replion monitoring:", error)
        return false
    end
end

-- Alternative method 2: Monitor fishing events directly
local function startEventMonitoring()
    local success, error = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local netFolder = ReplicatedStorage.Packages._Index:FindFirstChild("sleitnick_net@0.2.0")
        
        if netFolder and netFolder:FindFirstChild("net") then
            local net = netFolder.net
            local fishingCompleted = net:FindFirstChild("RE/FishingCompleted")
            
            if fishingCompleted then
                -- Hook into fishing completed event
                local originalFire = fishingCompleted.FireServer
                fishingCompleted.FireServer = function(...)
                    local result = originalFire(...)
                    
                    if isWebhookActive then
                        -- Wait a bit for inventory to update, then check in main thread
                        spawn(function()
                            wait(2)
                            print("Fishing completed, checking for new fish...")
                            checkForNewFish()
                        end)
                    end
                    
                    return result
                end
                
                print("Event monitoring started successfully")
                return true
            end
        end
        
        return false
    end)
    
    if success then
        return true
    else
        warn("Failed to start event monitoring:", error)
        return false
    end
end

-- Alternative method 3: Periodic inventory checking (with proper thread handling)
local function checkForNewFish()
    if not isWebhookActive then return end
    
    -- Ensure we're in main thread
    local RunService = game:GetService("RunService")
    RunService.Heartbeat:Wait()
    
    local success, error = pcall(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Client = require(ReplicatedStorage.Packages.Replion).Client
        local dataReplion = Client:WaitReplion("Data")
        
        local currentInventory = dataReplion:Get("Inventory")
        
        if currentInventory then
            -- Compare with last known state
            for category, items in pairs(currentInventory) do
                if type(items) == "table" then
                    for uuid, itemInfo in pairs(items) do
                        -- Check if this is a new item or increased quantity
                        local isNewItem = false
                        
                        if not lastInventoryState[category] or not lastInventoryState[category][uuid] then
                            isNewItem = true
                        elseif lastInventoryState[category][uuid].Quantity and itemInfo.Quantity then
                            if itemInfo.Quantity > lastInventoryState[category][uuid].Quantity then
                                isNewItem = true
                            end
                        end
                        
                        if isNewItem and itemInfo.Id then
                            local itemData = getItemData(itemInfo.Id)
                            
                            if itemData and itemData.Type == "Fishes" then
                                print("New fish detected:", itemData.Name)
                                
                                -- Process the fish
                                local isVariant = false
                                local variantName = nil
                                
                                if itemInfo.Metadata and itemInfo.Metadata.VariantId then
                                    local variantSuccess, variantData = pcall(function()
                                        local ItemUtility = require(ReplicatedStorage.Shared.ItemUtility)
                                        return ItemUtility:GetVariantData(itemInfo.Metadata.VariantId)
                                    end)
                                    
                                    if variantSuccess and variantData and variantData.Data then
                                        isVariant = true
                                        variantName = variantData.Data.Name
                                    end
                                end
                                
                                local weight = nil
                                if itemInfo.Metadata and itemInfo.Metadata.Weight then
                                    weight = itemInfo.Metadata.Weight
                                end
                                
                                sendWebhook(itemData.Name, itemData, weight, isVariant, variantName)
                                
                                Rayfield:Notify({
                                    Title = "Fish Detected!",
                                    Content = (variantName and (variantName .. " ") or "") .. itemData.Name .. " sent to webhook",
                                    Duration = 5,
                                    Image = "bell-ring",
                                })
                            end
                        end
                    end
                end
            end
            
            -- Update last known state
            lastInventoryState = {}
            for category, items in pairs(currentInventory) do
                lastInventoryState[category] = {}
                if type(items) == "table" then
                    for uuid, itemInfo in pairs(items) do
                        lastInventoryState[category][uuid] = {
                            Id = itemInfo.Id,
                            Quantity = itemInfo.Quantity
                        }
                    end
                end
            end
        end
    end)
    
    if not success then
        warn("Error checking for new fish:", error)
    end
end

-- Start monitoring function
local function startInventoryMonitoring()
    print("Starting inventory monitoring...")
    
    -- Reset retry count when starting
    httpRetryCount = 0
    
    -- Try method 1: Replion monitoring
    if startReplionMonitoring() then
        print("Using Replion monitoring method")
        return
    end
    
    -- Try method 2: Event monitoring
    if startEventMonitoring() then
        print("Using event monitoring method")
    end
    
    -- Method 3: Periodic checking as fallback
    print("Using periodic checking method")
    if inventoryConnection then
        inventoryConnection:Disconnect()
    end
    
    -- Initialize last inventory state
    spawn(function()
        wait(1)
        checkForNewFish() -- This will initialize lastInventoryState
    end)
    
    -- Start periodic checking (reduced frequency to avoid spam)
    inventoryConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if isWebhookActive then
            -- Check every 5 seconds instead of 3
            if tick() % 5 < 0.1 then
                checkForNewFish()
            end
        end
    end)
end

-- Stop monitoring function
local function stopInventoryMonitoring()
    if inventoryConnection then
        inventoryConnection:Disconnect()
        inventoryConnection = nil
    end
    lastInventoryState = {}
    httpRetryCount = 0
    print("Inventory monitoring stopped")
end

-- Webhook Toggle
local WebhookToggle = WebhookTab:CreateToggle({
    Name = "Enable Webhook Tracking",
    CurrentValue = false,
    Flag = "webhooktracking",
    Callback = function(Value)
        isWebhookActive = Value
        
        if Value then
            if webhookURL == "" then
                Rayfield:Notify({
                    Title = "No Webhook URL",
                    Content = "Please enter webhook URL first",
                    Duration = 5,
                    Image = "bell-ring",
                })
                WebhookToggle:Set(false)
                return
            end
            
            startInventoryMonitoring()
            
            Rayfield:Notify({
                Title = "Webhook Tracking Started",
                Content = "Now tracking new fish catches",
                Duration = 5,
                Image = "bell-ring",
            })
        else
            stopInventoryMonitoring()
            
            Rayfield:Notify({
                Title = "Webhook Tracking Stopped",
                Content = "",
                Duration = 3,
                Image = "bell-ring",
            })
        end
    end,
})

-- Test Webhook Button
local TestWebhookButton = WebhookTab:CreateButton({
    Name = "🧪 Test Webhook",
    Callback = function()
        if webhookURL == "" then
            Rayfield:Notify({
                Title = "No Webhook URL",
                Content = "Please enter webhook URL first",
                Duration = 5,
                Image = "bell-ring",
            })
            return
        end
        
        local testData = {
            Name = "Test Fish",
            Type = "Fishes",
            Tier = 3,
            SellPrice = 150,
            Weight = {Default = {Min = 2, Max = 5}},
            Probability = {Chance = 0.05}
        }
        
        sendWebhook("Test Fish", testData, 3.5, false, nil)
        
        Rayfield:Notify({
            Title = "Test Webhook Sent",
            Content = "Check your Discord channel",
            Duration = 5,
            Image = "bell-ring",
        })
    end,
})

-- Debug Button
local DebugButton = WebhookTab:CreateButton({
    Name = "🔍 Debug Current Inventory",
    Callback = function()
        local success, error = pcall(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Client = require(ReplicatedStorage.Packages.Replion).Client
            local dataReplion = Client:WaitReplion("Data")
            
            local currentInventory = dataReplion:Get("Inventory")
            
            if currentInventory then
                print("=== CURRENT INVENTORY DEBUG ===")
                for category, items in pairs(currentInventory) do
                    print("Category:", category)
                    if type(items) == "table" then
                        local count = 0
                        for uuid, itemInfo in pairs(items) do
                            count = count + 1
                            if count <= 3 then -- Show only first 3 items
                                print("  UUID:", uuid)
                                print("  ID:", itemInfo.Id)
                                print("  Quantity:", itemInfo.Quantity)
                                if itemInfo.Metadata then
                                    print("  Weight:", itemInfo.Metadata.Weight)
                                    print("  VariantId:", itemInfo.Metadata.VariantId)
                                end
                                print("  ---")
                            end
                        end
                        print("  Total items in", category .. ":", count)
                    end
                end
                print("=== END DEBUG ===")
                
                Rayfield:Notify({
                    Title = "Debug Complete",
                    Content = "Check console (F9) for inventory data",
                    Duration = 5,
                    Image = "bell-ring",
                })
            else
                print("No inventory data found")
            end
        end)
        
        if not success then
            warn("Debug error:", error)
        end
    end,
})

-- Reset Webhook Button (New)
local ResetWebhookButton = WebhookTab:CreateButton({
    Name = "🔄 Reset Webhook System",
    Callback = function()
        -- Stop monitoring
        if isWebhookActive then
            WebhookToggle:Set(false)
        end
        
        -- Reset all variables
        httpRetryCount = 0
        lastInventoryState = {}
        
        -- Wait a moment
        wait(1)
        
        -- Restart if webhook URL is set
        if webhookURL ~= "" then
            WebhookToggle:Set(true)
        end
        
        Rayfield:Notify({
            Title = "Webhook System Reset",
            Content = "All counters and states have been reset",
            Duration = 5,
            Image = "bell-ring",
        })
    end,
})

-- Webhook Info
local WebhookParagraph = WebhookTab:CreateParagraph({
    Title = "Webhook Information",
    Content = "🎣 This webhook will track all fish that enter your inventory\n\n📊 Tracked Data:\n• Fish Name & Variants\n• Weight (including BIG fish)\n• Sell Price\n• Tier & Rarity\n• Player Info\n\n⚠️ Features:\n• Auto-retry on failed requests\n• Thread safety protection\n• Temporary disable on errors\n• Multiple monitoring methods"
})

-- Clear Webhook Button
local ClearWebhookButton = WebhookTab:CreateButton({
    Name = "🗑️ Clear Webhook URL",
    Callback = function()
        webhookURL = ""
        WebhookInput:Set("")
        if isWebhookActive then
            WebhookToggle:Set(false)
        end
        httpRetryCount = 0
        
        Rayfield:Notify({
            Title = "Webhook URL Cleared",
            Content = "",
            Duration = 3,
            Image = "bell-ring",
        })
    end,
})
